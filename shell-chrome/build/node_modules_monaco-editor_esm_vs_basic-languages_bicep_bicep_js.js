"use strict";
(self["webpackChunk_vue_devtools_shell_chrome"] = self["webpackChunk_vue_devtools_shell_chrome"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_bicep_bicep_js"],{

/***/ "../../node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   conf: () => (/* binding */ conf),
/* harmony export */   language: () => (/* binding */ language)
/* harmony export */ });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var bounded = function (text) { return "\\b" + text + "\\b"; };
var identifierStart = '[_a-zA-Z]';
var identifierContinue = '[_a-zA-Z0-9]';
var identifier = bounded("" + identifierStart + identifierContinue + "*");
var keywords = [
    'targetScope',
    'resource',
    'module',
    'param',
    'var',
    'output',
    'for',
    'in',
    'if',
    'existing'
];
var namedLiterals = ['true', 'false', 'null'];
var nonCommentWs = "[ \\t\\r\\n]";
var numericLiteral = "[0-9]+";
var conf = {
    comments: {
        lineComment: '//',
        blockComment: ['/*', '*/']
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: "'", close: "'" },
        { open: "'''", close: "'''" }
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: "'", close: "'", notIn: ['string', 'comment'] },
        { open: "'''", close: "'''", notIn: ['string', 'comment'] }
    ],
    autoCloseBefore: ":.,=}])' \n\t",
    indentationRules: {
        increaseIndentPattern: new RegExp('^((?!\\/\\/).)*(\\{[^}"\'`]*|\\([^)"\'`]*|\\[[^\\]"\'`]*)$'),
        decreaseIndentPattern: new RegExp('^((?!.*?\\/\\*).*\\*/)?\\s*[\\}\\]].*$')
    }
};
var language = {
    defaultToken: '',
    tokenPostfix: '.bicep',
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.square' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    symbols: /[=><!~?:&|+\-*/^%]+/,
    keywords: keywords,
    namedLiterals: namedLiterals,
    escapes: "\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\|'|\\${)",
    tokenizer: {
        root: [{ include: '@expression' }, { include: '@whitespace' }],
        stringVerbatim: [
            { regex: "(|'|'')[^']", action: { token: 'string' } },
            { regex: "'''", action: { token: 'string.quote', next: '@pop' } }
        ],
        stringLiteral: [
            { regex: "\\${", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },
            { regex: "[^\\\\'$]+", action: { token: 'string' } },
            { regex: '@escapes', action: { token: 'string.escape' } },
            { regex: "\\\\.", action: { token: 'string.escape.invalid' } },
            { regex: "'", action: { token: 'string', next: '@pop' } }
        ],
        bracketCounting: [
            { regex: "{", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },
            { regex: "}", action: { token: 'delimiter.bracket', next: '@pop' } },
            { include: 'expression' }
        ],
        comment: [
            { regex: "[^\\*]+", action: { token: 'comment' } },
            { regex: "\\*\\/", action: { token: 'comment', next: '@pop' } },
            { regex: "[\\/*]", action: { token: 'comment' } }
        ],
        whitespace: [
            { regex: nonCommentWs },
            { regex: "\\/\\*", action: { token: 'comment', next: '@comment' } },
            { regex: "\\/\\/.*$", action: { token: 'comment' } }
        ],
        expression: [
            { regex: "'''", action: { token: 'string.quote', next: '@stringVerbatim' } },
            { regex: "'", action: { token: 'string.quote', next: '@stringLiteral' } },
            { regex: numericLiteral, action: { token: 'number' } },
            {
                regex: identifier,
                action: {
                    cases: {
                        '@keywords': { token: 'keyword' },
                        '@namedLiterals': { token: 'keyword' },
                        '@default': { token: 'identifier' }
                    }
                }
            }
        ]
    }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX21vbmFjby1lZGl0b3JfZXNtX3ZzX2Jhc2ljLWxhbmd1YWdlc19iaWNlcF9iaWNlcF9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXLEtBQUs7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFFBQVEsWUFBWSxHQUFHO0FBQ2pDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVSxRQUFRLFlBQVksR0FBRztBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVLHFEQUFxRDtBQUMvRCxVQUFVO0FBQ1Y7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSw4REFBOEQsR0FBRztBQUNqRSwwRUFBMEU7QUFDMUU7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsVUFBVSxRQUFRLFlBQVksNkJBQTZCO0FBQzNELFVBQVUsa0RBQWtEO0FBQzVELFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixhQUFhLGtCQUFrQjtBQUNwRDtBQUNBLGlCQUFpQix3QkFBd0IsSUFBSSx3QkFBd0I7QUFDckU7QUFDQSxjQUFjLGdDQUFnQyxtQkFBbUI7QUFDakUsY0FBYyx3QkFBd0I7QUFDdEM7QUFDQTtBQUNBLGNBQWMsWUFBWSxhQUFhLHdEQUF3RDtBQUMvRixjQUFjLCtCQUErQixtQkFBbUI7QUFDaEUsY0FBYyw2QkFBNkIsMEJBQTBCO0FBQ3JFLGNBQWMsMEJBQTBCLGtDQUFrQztBQUMxRSxjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0EsY0FBYyxTQUFTLGFBQWEsd0RBQXdEO0FBQzVGLGNBQWMsU0FBUyxhQUFhLDRDQUE0QztBQUNoRixjQUFjO0FBQ2Q7QUFDQTtBQUNBLGNBQWMsNEJBQTRCLG9CQUFvQjtBQUM5RCxjQUFjLDJCQUEyQixrQ0FBa0M7QUFDM0UsY0FBYywyQkFBMkI7QUFDekM7QUFDQTtBQUNBLGNBQWMscUJBQXFCO0FBQ25DLGNBQWMsMkJBQTJCLHNDQUFzQztBQUMvRSxjQUFjLDhCQUE4QjtBQUM1QztBQUNBO0FBQ0EsY0FBYyx3QkFBd0Isa0RBQWtEO0FBQ3hGLGNBQWMsc0JBQXNCLGlEQUFpRDtBQUNyRixjQUFjLGlDQUFpQyxtQkFBbUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsa0JBQWtCO0FBQ3pELDRDQUE0QyxrQkFBa0I7QUFDOUQsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUtZGV2dG9vbHMvc2hlbGwtY2hyb21lLy4uLy4uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNpYy1sYW5ndWFnZXMvYmljZXAvYmljZXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG52YXIgYm91bmRlZCA9IGZ1bmN0aW9uICh0ZXh0KSB7IHJldHVybiBcIlxcXFxiXCIgKyB0ZXh0ICsgXCJcXFxcYlwiOyB9O1xudmFyIGlkZW50aWZpZXJTdGFydCA9ICdbX2EtekEtWl0nO1xudmFyIGlkZW50aWZpZXJDb250aW51ZSA9ICdbX2EtekEtWjAtOV0nO1xudmFyIGlkZW50aWZpZXIgPSBib3VuZGVkKFwiXCIgKyBpZGVudGlmaWVyU3RhcnQgKyBpZGVudGlmaWVyQ29udGludWUgKyBcIipcIik7XG52YXIga2V5d29yZHMgPSBbXG4gICAgJ3RhcmdldFNjb3BlJyxcbiAgICAncmVzb3VyY2UnLFxuICAgICdtb2R1bGUnLFxuICAgICdwYXJhbScsXG4gICAgJ3ZhcicsXG4gICAgJ291dHB1dCcsXG4gICAgJ2ZvcicsXG4gICAgJ2luJyxcbiAgICAnaWYnLFxuICAgICdleGlzdGluZydcbl07XG52YXIgbmFtZWRMaXRlcmFscyA9IFsndHJ1ZScsICdmYWxzZScsICdudWxsJ107XG52YXIgbm9uQ29tbWVudFdzID0gXCJbIFxcXFx0XFxcXHJcXFxcbl1cIjtcbnZhciBudW1lcmljTGl0ZXJhbCA9IFwiWzAtOV0rXCI7XG5leHBvcnQgdmFyIGNvbmYgPSB7XG4gICAgY29tbWVudHM6IHtcbiAgICAgICAgbGluZUNvbW1lbnQ6ICcvLycsXG4gICAgICAgIGJsb2NrQ29tbWVudDogWycvKicsICcqLyddXG4gICAgfSxcbiAgICBicmFja2V0czogW1xuICAgICAgICBbJ3snLCAnfSddLFxuICAgICAgICBbJ1snLCAnXSddLFxuICAgICAgICBbJygnLCAnKSddXG4gICAgXSxcbiAgICBzdXJyb3VuZGluZ1BhaXJzOiBbXG4gICAgICAgIHsgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXG4gICAgICAgIHsgb3BlbjogXCInXCIsIGNsb3NlOiBcIidcIiB9LFxuICAgICAgICB7IG9wZW46IFwiJycnXCIsIGNsb3NlOiBcIicnJ1wiIH1cbiAgICBdLFxuICAgIGF1dG9DbG9zaW5nUGFpcnM6IFtcbiAgICAgICAgeyBvcGVuOiAneycsIGNsb3NlOiAnfScgfSxcbiAgICAgICAgeyBvcGVuOiAnWycsIGNsb3NlOiAnXScgfSxcbiAgICAgICAgeyBvcGVuOiAnKCcsIGNsb3NlOiAnKScgfSxcbiAgICAgICAgeyBvcGVuOiBcIidcIiwgY2xvc2U6IFwiJ1wiLCBub3RJbjogWydzdHJpbmcnLCAnY29tbWVudCddIH0sXG4gICAgICAgIHsgb3BlbjogXCInJydcIiwgY2xvc2U6IFwiJycnXCIsIG5vdEluOiBbJ3N0cmluZycsICdjb21tZW50J10gfVxuICAgIF0sXG4gICAgYXV0b0Nsb3NlQmVmb3JlOiBcIjouLD19XSknIFxcblxcdFwiLFxuICAgIGluZGVudGF0aW9uUnVsZXM6IHtcbiAgICAgICAgaW5jcmVhc2VJbmRlbnRQYXR0ZXJuOiBuZXcgUmVnRXhwKCdeKCg/IVxcXFwvXFxcXC8pLikqKFxcXFx7W159XCJcXCdgXSp8XFxcXChbXilcIlxcJ2BdKnxcXFxcW1teXFxcXF1cIlxcJ2BdKikkJyksXG4gICAgICAgIGRlY3JlYXNlSW5kZW50UGF0dGVybjogbmV3IFJlZ0V4cCgnXigoPyEuKj9cXFxcL1xcXFwqKS4qXFxcXCovKT9cXFxccypbXFxcXH1cXFxcXV0uKiQnKVxuICAgIH1cbn07XG5leHBvcnQgdmFyIGxhbmd1YWdlID0ge1xuICAgIGRlZmF1bHRUb2tlbjogJycsXG4gICAgdG9rZW5Qb3N0Zml4OiAnLmJpY2VwJyxcbiAgICBicmFja2V0czogW1xuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JywgdG9rZW46ICdkZWxpbWl0ZXIuY3VybHknIH0sXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nLCB0b2tlbjogJ2RlbGltaXRlci5zcXVhcmUnIH0sXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknLCB0b2tlbjogJ2RlbGltaXRlci5wYXJlbnRoZXNpcycgfVxuICAgIF0sXG4gICAgc3ltYm9sczogL1s9Pjwhfj86JnwrXFwtKi9eJV0rLyxcbiAgICBrZXl3b3Jkczoga2V5d29yZHMsXG4gICAgbmFtZWRMaXRlcmFsczogbmFtZWRMaXRlcmFscyxcbiAgICBlc2NhcGVzOiBcIlxcXFxcXFxcKHV7WzAtOUEtRmEtZl0rfXxufHJ8dHxcXFxcXFxcXHwnfFxcXFwkeylcIixcbiAgICB0b2tlbml6ZXI6IHtcbiAgICAgICAgcm9vdDogW3sgaW5jbHVkZTogJ0BleHByZXNzaW9uJyB9LCB7IGluY2x1ZGU6ICdAd2hpdGVzcGFjZScgfV0sXG4gICAgICAgIHN0cmluZ1ZlcmJhdGltOiBbXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIih8J3wnJylbXiddXCIsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZycgfSB9LFxuICAgICAgICAgICAgeyByZWdleDogXCInJydcIiwgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nLnF1b3RlJywgbmV4dDogJ0Bwb3AnIH0gfVxuICAgICAgICBdLFxuICAgICAgICBzdHJpbmdMaXRlcmFsOiBbXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlxcXFwke1wiLCBhY3Rpb246IHsgdG9rZW46ICdkZWxpbWl0ZXIuYnJhY2tldCcsIG5leHQ6ICdAYnJhY2tldENvdW50aW5nJyB9IH0sXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlteXFxcXFxcXFwnJF0rXCIsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZycgfSB9LFxuICAgICAgICAgICAgeyByZWdleDogJ0Blc2NhcGVzJywgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nLmVzY2FwZScgfSB9LFxuICAgICAgICAgICAgeyByZWdleDogXCJcXFxcXFxcXC5cIiwgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nLmVzY2FwZS5pbnZhbGlkJyB9IH0sXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIidcIiwgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nJywgbmV4dDogJ0Bwb3AnIH0gfVxuICAgICAgICBdLFxuICAgICAgICBicmFja2V0Q291bnRpbmc6IFtcbiAgICAgICAgICAgIHsgcmVnZXg6IFwie1wiLCBhY3Rpb246IHsgdG9rZW46ICdkZWxpbWl0ZXIuYnJhY2tldCcsIG5leHQ6ICdAYnJhY2tldENvdW50aW5nJyB9IH0sXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIn1cIiwgYWN0aW9uOiB7IHRva2VuOiAnZGVsaW1pdGVyLmJyYWNrZXQnLCBuZXh0OiAnQHBvcCcgfSB9LFxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnZXhwcmVzc2lvbicgfVxuICAgICAgICBdLFxuICAgICAgICBjb21tZW50OiBbXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlteXFxcXCpdK1wiLCBhY3Rpb246IHsgdG9rZW46ICdjb21tZW50JyB9IH0sXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlxcXFwqXFxcXC9cIiwgYWN0aW9uOiB7IHRva2VuOiAnY29tbWVudCcsIG5leHQ6ICdAcG9wJyB9IH0sXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIltcXFxcLypdXCIsIGFjdGlvbjogeyB0b2tlbjogJ2NvbW1lbnQnIH0gfVxuICAgICAgICBdLFxuICAgICAgICB3aGl0ZXNwYWNlOiBbXG4gICAgICAgICAgICB7IHJlZ2V4OiBub25Db21tZW50V3MgfSxcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiXFxcXC9cXFxcKlwiLCBhY3Rpb246IHsgdG9rZW46ICdjb21tZW50JywgbmV4dDogJ0Bjb21tZW50JyB9IH0sXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlxcXFwvXFxcXC8uKiRcIiwgYWN0aW9uOiB7IHRva2VuOiAnY29tbWVudCcgfSB9XG4gICAgICAgIF0sXG4gICAgICAgIGV4cHJlc3Npb246IFtcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiJycnXCIsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZy5xdW90ZScsIG5leHQ6ICdAc3RyaW5nVmVyYmF0aW0nIH0gfSxcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiJ1wiLCBhY3Rpb246IHsgdG9rZW46ICdzdHJpbmcucXVvdGUnLCBuZXh0OiAnQHN0cmluZ0xpdGVyYWwnIH0gfSxcbiAgICAgICAgICAgIHsgcmVnZXg6IG51bWVyaWNMaXRlcmFsLCBhY3Rpb246IHsgdG9rZW46ICdudW1iZXInIH0gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZWdleDogaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdAa2V5d29yZHMnOiB7IHRva2VuOiAna2V5d29yZCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdAbmFtZWRMaXRlcmFscyc6IHsgdG9rZW46ICdrZXl3b3JkJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BkZWZhdWx0JzogeyB0b2tlbjogJ2lkZW50aWZpZXInIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=